plugins {
  id 'org.springframework.boot' version '3.3.3'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'java'
}

group = 'com.rem'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'io.springfox:springfox-boot-starter:3.0.0'
  implementation 'io.jsonwebtoken:jjwt:0.12.6'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
  implementation 'software.amazon.awssdk:s3:2.27.9' // aws s3를 위한 java용 sdk
  implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
  runtimeOnly 'com.h2database:h2'
  implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
  annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
  annotationProcessor "jakarta.persistence:jakarta.persistence-api"
  annotationProcessor "jakarta.annotation:jakarta.annotation-api"
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'io.findify:s3mock_2.13:0.2.6'
}

test {
  useJUnitPlatform()
}

// build/에서 해당 폴더를 찾아 Java의 파일 객체로 변환
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile).configureEach { // 각 Java 컴파일 작업에 개별 적용
  // 빌드 중 생성되는 소스 파일이 배치될 디렉토리를 설정
  options.generatedSourceOutputDirectory.set(querydslDir)
}

sourceSets {
  main.java.srcDirs += [querydslDir]
}