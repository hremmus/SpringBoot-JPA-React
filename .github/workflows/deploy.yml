name: Build and Deploy Backend & Frontend

on:
  push:
    branches: master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up application-secret.yml
        run: echo "${{ secrets.APPLICATION_SECRET_YML }}" > backend/src/main/resources/application-secret.yml
        
      - name: Grant execute permission for gradlew
        run: |
          cd backend
          chmod +x ./gradlew
      
      - name: Build Spring Boot
        run: |
          cd backend
          ./gradlew clean build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build React App
        run: |
          cd frontend
          npm install
          npm run build
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}:latest
          push: true
          
      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:latest
          push: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:latest
            
            sudo docker stop $(docker ps -a -q)
            sudo docker run -d --name ${{ secrets.DOCKER_BACKEND_IMAGE_NAME }} -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}:latest
            sudo docker run -d --name ${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }} -p 80:80 -p 443:443 ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:latest
            sudo docker rm $(docker ps --filter 'status=exited' -a -q)
            sudo docker image prune -a -f

      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
